[gcode_macro DANCE]
gcode:
    G28
    SET_LED_EFFECT EFFECT=Rainbow
    G91
    G1 z-100 F9000
    G91
    G1 Y+50 F9000
    G91
    G1 X-50 F9000
    G91
    G1 Z+50 F9000
    G91
    G1 Y-50 F9000
    G91
    G1 X+50 F9000
    G91
    G1 Z-50 F9000
    G91
    G1 Y+50 F9000
    G91
    G1 X-50 F9000
    G91
    G1 Z+45 F9000
    G91
    G1 Y+50 F9000
    G91
    G1 X+50 F9000
    G91
    G1 Y-50 F9000
    G91
    G1 X-50 F9000
    G28
    G90
    Display_LtBlue
  ################################################  
[gcode_macro PID_TUNE_HOTEND]
description: PID Tune Hotend at 245C Fans@100%
gcode:
  G28
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET=245
  STATUS_READY  
  ################################################
[gcode_macro PID_TUNE_BED]
description: PID Tune Hotend at 75C
gcode:
  G28
  PID_CALIBRATE HEATER=heater_bed TARGET=75
  STATUS_READY  

  ################################################
[gcode_macro LOAD_FILAMENT]
gcode:
   M117 Filament loading
   M82                      #set extruder to absolute mode
   G92 E0
   G4 P2000             # wait for two second
   FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=5 ACCEL=1000  # load filament inside the gears force move needs to be enabled
   M109 S235 T0       # set hotend temperature and wait
   G1 E150 F300        # extrude 150mm
   M400                      # wait for current move to finish
   M104 S0 T0           # set hotend temperature to 0
   G92 E0                  # zero extruder position

  ################################################    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   M109 S235 T0
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute
   M400                      # wait for current move to finish
   M104 S0 T0           # set hotend temperature to 0
   G92 E0                  # zero extruder position

  ################################################

[gcode_macro Display_Violet]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0.5 GREEN=0 BLUE=0.75 TRANSMIT=1
  ################################################
[gcode_macro Display_Blue]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0.75 TRANSMIT=1
  ################################################
[gcode_macro Display_Red]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0.75 GREEN=0 BLUE=0 TRANSMIT=1
  ################################################
[gcode_macro Display_Green]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.75 BLUE=0 TRANSMIT=1
  ################################################
[gcode_macro Display_LtBlue]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.5 BLUE=0.75 TRANSMIT=1
  ################################################
[gcode_macro Display_Yellow]
gcode:
 STOP_LED_EFFECTS
 SET_LED LED=fysetc_mini12864 RED=0.75 GREEN=0.5 BLUE=0 TRANSMIT=1
  ################################################
[gcode_macro no_leds]
gcode:
 STOP_LED_EFFECTS
 Display_LtBlue
  ################################################
[gcode_macro full_lite]
gcode:
  SET_PIN PIN=caselight VALUE=1.0
  ################################################
[gcode_macro half_lite]
gcode:
  SET_PIN PIN=caselight VALUE=0.5
  ################################################
[gcode_macro little_lite]
gcode:
  SET_PIN PIN=caselight VALUE=0.25

  ################################################
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
  ################################################
[gcode_macro CG28]
# Required Macros: CONSOLE_MESSAGE
description: Conditional G28
gcode:

    # Check if printer is homed
    {% if "xyz" not in printer.toolhead.homed_axes %} 
        CONSOLE_MESSAGE MSG="Homing printer"
        G28

    {% else %}
        CONSOLE_MESSAGE MSG="Printer already homed"

    {% endif %}

  #################################################

[idle_timeout]
timeout: 1800
gcode:
  M117 PHX on STANBY
  M107

  #################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  CG28

[gcode_macro CAM_SET]
gcode:
    contrast CONTRAST=55
    brightness BRIGHTNESS=55
    sharpness SHARPNESS=5

###############VARIABLES###################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 7.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:




######################Dump Var######################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

#########Get VARS####################

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}



